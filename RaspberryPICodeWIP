import pyaudio
import wave
import queue
import threading
import time
import json
from datetime import datetime
from vosk import Model, KaldiRecognizer

class AudioTranscriber:
    def __init__(self, output_file="transcript.txt"):
        self.model_path = "~/vosk_model/model"  # may need to adjust if needed
        self.output_file = output_file
        self.is_recording = False
        self.audio_queue = queue.Queue()
        
        # Audio settings optimized for Raspberry Pi
        self.chunk_size = 2048      # smaller chunks = less CPU usage
        self.sample_format = pyaudio.paInt16
        self.channels = 1
        self.sample_rate = 8000     # lower sample rate = less processing load
        
        # Load Vosk model
        self.model = Model(self.model_path)
        self.recognizer = KaldiRecognizer(self.model, self.sample_rate)

    def _save_transcript(self, text):
        """Saves transcribed text with a timestamp"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open(self.output_file, "a", encoding='utf-8') as f:
                f.write(f"[{timestamp}] {text}\n")
            print(f"Transcribed: {text}")
        except Exception as e:
            print(f"Error saving transcript: {e}")

    def _process_audio_queue(self):
        """Processes audio from the queue and transcribes it"""
        while self.is_recording or not self.audio_queue.empty():
            try:
                audio_chunk = self.audio_queue.get(timeout=1)
                if self.recognizer.AcceptWaveform(audio_chunk):
                    result = json.loads(self.recognizer.Result())
                    text = result.get("text", "")
                    if text:
                        self._save_transcript(text)
            except queue.Empty:
                continue
            except Exception as e:
                print(f"Error processing audio queue: {e}")

    def _audio_callback(self, in_data, frame_count, time_info, status):
        """Callback function to collect audio data"""
        self.audio_queue.put(in_data)
        return (in_data, pyaudio.paContinue)

    def _find_microphone(self):
        """Finds and selects the USB microphone automatically"""
       
