import speech_recognition as sr
import pyaudio
import wave
import threading
import time
import queue
import keyboard
from datetime import datetime

class AudioTranscriber:
    def __init__(self, output_file="transcript.txt"):
        # Initialize our core components
        self.recognizer = sr.Recognizer()
        self.output_file = output_file
        self.is_recording = False
        
        # Create a queue to manage audio data buffering
        self.audio_queue = queue.Queue()
        
        # Audio settings optimized for stability
        self.chunk_size = 4096      # Larger chunk size for better stability
        self.sample_format = pyaudio.paInt16
        self.channels = 1
        self.sample_rate = 16000    # Lower sample rate reduces processing load
        
        # Configure the recognizer for better performance
        self.recognizer.energy_threshold = 300  # Adjust sensitivity
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 0.8   # Shorter pause detection
        
    def _save_transcript(self, text):
        """Saves transcribed text with timestamp and handles errors gracefully"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open(self.output_file, "a", encoding='utf-8') as f:
                f.write(f"[{timestamp}] {text}\n")
            print(f"Transcribed: {text}")
            # comment out if u dont want to press keys
            letters_to_press = ['q', 'w', 'e', 'r']
            for letter in letters_to_press:
                if letter in text.lower():  # Case-insensitive check
                    print(f"Detected '{letter}' in transcribed text. Pressing the '{letter}' key...")
                    if letter.__contains__('r'):  # Ensure the letter is valid
                        keyboard.press_and_release(15)  # Simulate pressing the key
                        # time.sleep(0.1)
                    if letter.__contains__('e'):
                        keyboard.press_and_release(14)
                        # time.sleep(0.1)
                    if letter.__contains__('w'):
                        keyboard.press_and_release(13)
                        # time.sleep(0.1)
                    if letter.__contains__('q'):
                        keyboard.press_and_release(12)
                        # time.sleep(0.1)
            # end comment here if u dont want to press keys
        except Exception as e:
            print(f"Error saving transcript: {e}")
            # Check for specific letters and simulate pressing keys
        

    def _process_audio_queue(self):
        """Processes audio data from the queue, with error handling"""
        accumulated_data = bytearray()
        
        while self.is_recording or not self.audio_queue.empty():
            try:
                # Get audio data from queue with timeout
                audio_chunk = self.audio_queue.get(timeout=1)
                accumulated_data.extend(audio_chunk)
                
                # Process when we have enough data (about 2 seconds worth)
                if len(accumulated_data) >= self.sample_rate * 2 * 2:  # 2 seconds * 2 bytes per sample
                    try:
                        audio = sr.AudioData(bytes(accumulated_data),
                                           self.sample_rate,
                                           2)  # 2 bytes per sample
                        
                        text = self.recognizer.recognize_google(audio)
                        if text:
                            self._save_transcript(text)
                    except sr.UnknownValueError:
                        pass  # No speech detected
                    except sr.RequestError as e:
                        print(f"Speech recognition error: {e}")
                        
                    # Clear the buffer after processing
                    accumulated_data = bytearray()
                    
            except queue.Empty:
                continue  # Queue is empty, continue waiting
            except Exception as e:
                print(f"Error processing audio queue: {e}")
                time.sleep(0.1)  # Prevent tight loop on error

    def _audio_callback(self, in_data, frame_count, time_info, status):
        """Callback function for audio stream that safely handles the data"""
        if status:
            print(f"Stream status: {status}")
        
        try:
            self.audio_queue.put(in_data)
        except Exception as e:
            print(f"Error in audio callback: {e}")
            
        return (in_data, pyaudio.paContinue)

    def start(self):
        """Starts the audio recording and transcription with comprehensive error handling"""
        print("\nInitializing audio transcription...")
        
        try:
            audio = pyaudio.PyAudio()
            
            # Print available devices for debugging
            print("\nAvailable audio input devices:")
            for i in range(audio.get_device_count()):
                try:
                    device_info = audio.get_device_info_by_index(1)
                    if device_info.get('maxInputChannels') > 0:
                        print(f"Device {i}: {device_info.get('name')}")
                except Exception as e:
                    print(f"Error getting device info for index {i}: {e}")
            
            # Open audio stream with error handling
            try:
                stream = audio.open(
                    format=self.sample_format,
                    channels=self.channels,
                    rate=self.sample_rate,
                    input=True,
                    frames_per_buffer=self.chunk_size,
                    stream_callback=self._audio_callback
                )
            except Exception as e:
                print(f"Error opening audio stream: {e}")
                return
            
            print("\nRecording started successfully!")
            print("Press Ctrl+C to stop recording")
            
            self.is_recording = True
            
            # Start processing thread
            processing_thread = threading.Thread(target=self._process_audio_queue)
            processing_thread.start()
            
            # Keep main thread alive and handle keyboard interrupt
            try:
                while self.is_recording:
                    time.sleep(0.1)
            except KeyboardInterrupt:
                print("\nStopping recording...")
            finally:
                self.is_recording = False
                
                # Clean up resources
                try:
                    stream.stop_stream()
                    stream.close()
                except Exception as e:
                    print(f"Error closing stream: {e}")
                
                try:
                    audio.terminate()
                except Exception as e:
                    print(f"Error terminating audio: {e}")
                
                # Wait for processing thread to finish
                processing_thread.join()
                print("Recording stopped.")
                
        except Exception as e:
            print(f"Critical error in start method: {e}")

# Example usage
if __name__ == "__main__":
    transcriber = AudioTranscriber()
    transcriber.start()

